@using System.Text;
@using System.Globalization;
@inject HttpClient HttpClient

@if (_orders is null || _providers is null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <!-- Controls -->
    <div class="row">
        
        <div class="col">

            <div class="hstack">

                <div class="input-group">
                    <div class="input-group-prepend">
                        <label class="input-group-text bg-transparent border-0">From</label>
                    </div>
                    <input type="date" class="form-control shadow-sm" @bind=_from>
                </div>

                <div class="input-group">
                    <div class="input-group-prepend">
                        <label class="input-group-text bg-transparent border-0">to</label>
                    </div>
                    <input type="date" class="form-control shadow-sm" @bind=_to>
                </div>

            </div>

            <select class="form-select shadow-sm mt-2" @bind=_selectedProviderId>
                <option value="-1" selected>Select provider...</option>
                @foreach (var provider in _providers)
                {
                    <option value="@provider.Id">@provider.Name</option>
                }
            </select>

        </div>

        <div class="col">
            <button type="button" class="btn btn-secondary shadow-sm" @onclick="GetOrders">
                Filter
            </button>

            <button type="button" class="btn btn-success shadow-sm" @onclick="() => ShowOrderEdit(new Order(), true)">
                New
            </button>
        </div>

    </div>

    <!-- Data -->
    <table class="table table-striped mt-3">
        <thead>
            <tr class="fw-bold text-uppercase">
                <td scope="col">Date</td>
                <td scope="col">Number</td>
                <td scope="col">Provider</td>
                <td scope="col" />
            </tr>
        </thead>
        <tbody>
            @foreach (var order in _orders)
            {
                <tr>
                    <td scope="row">@order.Date.ToString(CultureInfo.CreateSpecificCulture("").DateTimeFormat.ShortDatePattern)</td>
                    <td scope="row">@order.Number</td>
                    <td scope="row">@order.Provider.Name</td>
                    <td scope="row">
                        <div class="hstack gap-2">
                            <button class="btn btn-warning shadow-sm" @onclick="() => ShowOrderEdit(order)">
                                Edit
                            </button>
                            <button class="btn btn-danger shadow-sm" @onclick="() => ShowOrderDelete(order)">
                                Delete
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Paging -->
    @if (_numberOfPages > 1)
    {
        <nav>
            <ul class="pagination justify-content-center">
                
                <li class="page-item">
                    <button
                        class="page-link"
                        disabled="@(_currentPage == 1)"
                        @onclick="() => SetPage(_currentPage - 1)">
                        Previous
                    </button>
                </li>
                
                @for (int i = 0; i < _paginationButtons.Length; i++)
                {
                    int pageNumber = _paginationButtons[i];

                    @if (pageNumber <= 0) continue;

                    @if (pageNumber == _currentPage)
                    {
                        <li class="page-item active">
                            <button class="page-link" disabled>
                                @pageNumber
                            </button>
                        </li>
                    }
                    else
                    {
                        <li class="page-item">
                            <button class="page-link" @onclick="() => SetPage(pageNumber)">
                                @pageNumber
                            </button>
                        </li>
                    }
                }

                <li class="page-item">
                    <button
                        class="page-link"
                        disabled="@(_currentPage == _numberOfPages)"
                        @onclick="() => SetPage(_currentPage + 1)">
                        Next
                    </button>
                </li>
            </ul>
        </nav>
    }
}

<OrderEdit
    Show="_showOrderEdit"
    NewOrder="_newOrderEdit"
    Order="_orderToEdit"
    OnCancelOrderEdit="CancelOrderEdit"
    OnOrderEditComplete="async () => await CompleteOrderEdit()"
    Providers="_providers" />

<OrderDelete
    Show="_showOrderDelete"
    Order="_orderToDelete"
    OnCancelOrderDelete="CancelOrderDelete"
    OnOrderDeleteComplete="async () => await CompleteOrderDelete()" />

@code {
    private IEnumerable<Order>? _orders;

    private Provider[]? _providers;

    private int? _selectedProviderId;

    private DateTime _from = DateTime.UtcNow.Date.AddMonths(-1);

    private DateTime _to = DateTime.UtcNow.Date.AddDays(1);

    private async Task GetData()
    {
        await GetOrders();
        await GetProviders();
    }

    private async Task GetOrders()
    {
        _orders = null;

        StringBuilder strBuilder = new StringBuilder();
        strBuilder.Append("api/Orders");
        strBuilder.Append("?");
        strBuilder.Append($"From={_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss")}Z");
        strBuilder.Append("&");
        strBuilder.Append($"To={_to.AddDays(1).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss")}Z");
        strBuilder.Append("&");
        strBuilder.Append($"Limit={_ordersPerPage}");
        strBuilder.Append("&");
        strBuilder.Append($"Offset={_ordersPerPage * (_currentPage - 1)}");

        if (_selectedProviderId is not null && _selectedProviderId != -1)
        {
            strBuilder.Append("&");
            strBuilder.Append($"ProviderId={_selectedProviderId}");
        }

        var response = await HttpClient.GetFromJsonAsync<GetOrdersResponse>(strBuilder.ToString());

        if (response is not null)
        {
            _numberOfPages = (int)Math.Ceiling((double)response.OrdersNumber / _ordersPerPage);
            _paginationButtons = GetPagesNumbersForPaginationButtons();
            _orders = response.Orders;
        }
    }

    private async Task GetProviders()
    {
        _providers = await HttpClient.GetFromJsonAsync<Provider[]>("api/Providers");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }

    #region Paging

    private const int _ordersPerPage = 7;

    private const int _numberOfPaginationButtons = 3;

    private int _numberOfPages = 1;

    private int _currentPage = 1;

    private int[] _paginationButtons = Array.Empty<int>();

    private async Task SetPage(int page)
    {
        _currentPage = page;
        await GetOrders();
    }

    private int[] GetPagesNumbersForPaginationButtons()
    {
        int[] result = new int[_numberOfPaginationButtons];

        int start;

        if (_currentPage == 1)
        {
            start = 1;
        }
        else if (_currentPage == _numberOfPages)
        {
            start = _numberOfPages - _numberOfPaginationButtons + 1;
        }
        else
        {
            start = _currentPage - 1;
        }

        int j = 0;
        for (int i = start; i <= start + _numberOfPaginationButtons - 1 && i <= _numberOfPages; i++)
        {
            @if (i <= 0) continue;

            result[j] = i;
            j++;
        }

        return result;
    }

    #endregion

    #region Edit

    private bool _showOrderEdit = false;
    private bool _newOrderEdit = false;
    private Order? _orderToEdit;

    private void ShowOrderEdit(Order order, bool newOrder = false)
    {
        _newOrderEdit = newOrder;
        _orderToEdit = order;
        _showOrderEdit = true;
    }

    private void CancelOrderEdit()
    {
        _newOrderEdit = false;
        _showOrderEdit = false;
        _orderToEdit = null;
    }

    private async Task CompleteOrderEdit()
    {
        _showOrderEdit = false;
        _newOrderEdit = false;
        _orderToEdit = null;

        await GetData();

        StateHasChanged();
    }

    #endregion

    #region Delete

    private bool _showOrderDelete = false;
    private Order? _orderToDelete;

    private void ShowOrderDelete(Order order)
    {
        _orderToDelete = order;
        _showOrderDelete = true;
    }

    private void CancelOrderDelete()
    {
        _showOrderDelete = false;
        _orderToDelete = null;
    }

    private async Task CompleteOrderDelete()
    {
        _showOrderDelete = false;
        _orderToDelete = null;

        await GetData();

        StateHasChanged();
    }

    #endregion
}
