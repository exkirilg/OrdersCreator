@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations;
@inject HttpClient HttpClient

@if (Show)
{
    <div class="modal show" style="display:block">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">

                <EditForm Model="@_order" OnValidSubmit="@SaveChanges">

                    <DataAnnotationsValidator />

                    <div class="modal-header">
                        @if (Order is null)
                        {
                            <h4 class="modal-title">New Order</h4>
                        }
                        else
                        {
                            <h4 class="modal-title">"@($"Order {Order?.Number} {Order?.Date.ToString()}")"</h4>
                        }

                        <button type="button" class="close" @onclick="Cancel" disabled="@_loading">
                            &times;
                        </button>
                    </div>

                    @if (_loading)
                    {
                        <div class="d-flex justify-content-center modal-body">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="modal-body">

                            <div class="vstack gap-2">

                                <!-- Number -->
                                <div class="form-group row">
                                    <label class="col-sm-2 col-form-label">Number</label>
                                    <div class="col-sm-10">
                                        <InputText class="form-control" @bind-Value="_order!.Number" />
                                        <div class="text-center text-danger my-1">
                                            <small>
                                                <ValidationMessage For="@(() => _order.Number)" />
                                            </small>
                                        </div>
                                    </div>
                                </div>

                                <!-- Date -->
                                <div class="form-group row">
                                    <label class="col-sm-2 col-form-label">Date</label>
                                    <div class="col-sm-10">
                                        <InputDate class="form-control" Type="InputDateType.DateTimeLocal" @bind-Value="_order!.Date" />
                                        <div class="text-center text-danger my-1">
                                            <small>
                                                <ValidationMessage For="@(() => _order.Date)" />
                                            </small>
                                        </div>
                                    </div>
                                </div>

                                <!-- Provider -->
                                <div class="form-group row">
                                    <label class="col-sm-2 col-form-label">Provider</label>
                                    <div class="col-sm-10">
                                        <InputSelect class="form-select" @bind-Value="ProviderId">
                                            <option value="0" disabled>Select provider...</option>
                                            @foreach (var provider in Providers)
                                            {
                                                <option value="@provider.Id">@provider.Name</option>
                                            }
                                        </InputSelect>
                                        <div class="text-center text-danger my-1">
                                            <small>
                                                <ValidationMessage For="@(() => _order.Provider)" />
                                            </small>
                                        </div>
                                    </div>
                                </div>

                                <!-- Items -->
                                <div class="form-group row">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr class="fw-bold text-uppercase">
                                                <td scope="col">Name</td>
                                                <td scope="col">Quantity</td>
                                                <td scope="col">Unit</td>
                                                <td scope="col" />
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in _order!.Items)
                                            {
                                                <tr>
                                                    <td scope="row">
                                                        <InputText class="form-control" @bind-Value="@item.Name" />
                                                        <div class="text-center text-danger my-1">
                                                            <small>
                                                                <ValidationMessage For="@(() => item.Name)" />
                                                            </small>
                                                        </div>
                                                    </td>
                                                    <td scope="row">
                                                        <InputNumber class="form-control" @bind-Value="@item.Quantity" />
                                                        <div class="text-center text-danger my-1">
                                                            <small>
                                                                <ValidationMessage For="@(() => item.Quantity)" />
                                                            </small>
                                                        </div>
                                                    </td>
                                                    <td scope="row">
                                                        <InputText class="form-control" @bind-Value="@item.Unit" />
                                                        <div class="text-center text-danger my-1">
                                                            <small>
                                                                <ValidationMessage For="@(() => item.Unit)" />
                                                            </small>
                                                        </div>
                                                    </td>
                                                    <td scope="row">
                                                        <button class="btn btn-danger" @onclick="() => _order!.RemoveItem(item.Id)">
                                                            Delete
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                            <tr>
                                                <td scope="row" colspan="4">
                                                    <button class="btn btn-success" @onclick="() => _order!.AddItem(new OrderItem())">
                                                        Add item
                                                    </button>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>

                            </div>

                        </div>
                    }

                    <div class="modal-footer">
                        <button type="button" class="btn" @onclick="Cancel" disabled="@_loading">
                            Cancel
                        </button>
                        <button type="submit" class="btn btn-success" disabled="@_loading">
                            Save
                        </button>
                    </div>

                </EditForm>

            </div>
        </div>
    </div>
}

@code {
    private bool _loading = false;

    private Order? _order;

    private int _providerId = 0;

    [Parameter]
    public bool Show { get; set; }

    [Parameter]
    public Order? Order { get; set; }

    [Parameter]
    public Action? OnCancel { get; set; }

    [Parameter]
    public Action? OnComplete { get; set; }

    [Parameter]
    public IEnumerable<Provider> Providers { get; set; } = Enumerable.Empty<Provider>();

    private int ProviderId
    {
        get => _providerId;
        set
        {
            if (ProviderId == value) return;

            _providerId = value;

            if (_order is not null && value != 0 && _order!.Provider?.Id != value)
            {
                _order.Provider = Providers.Where(p => p.Id == _providerId).First();
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (Order is null)
        {
            _order = new() { Date = DateTime.UtcNow };
        }
        else
        {
            _order = Order.Copy();
            ProviderId = Order.Provider.Id;
        }
    }

    private void Cancel()
    {
        EndEditing();
        OnCancel?.Invoke();
    }

    private async Task SaveChanges()
    {
        _loading = true;

        try
        {
            if (Order is null)
            {
                NewOrderRequest request = new NewOrderRequest(
                    _order!.Number, _order!.Date, _order!.Provider.Id,
                    _order!.Items.Select(i => new NewOrderRequestItem(i.Name, i.Quantity, i.Unit)));
                var result = await HttpClient.PostAsJsonAsync<NewOrderRequest>($"api/Orders", request);
                if (result.IsSuccessStatusCode)
                {
                    EndEditing();
                    OnComplete?.Invoke();
                }
            }
            else
            {
                UpdateOrderRequest request = new UpdateOrderRequest(
                    _order!.Id, _order!.Number, _order!.Date, _order!.Provider.Id,
                    _order!.Items.Select(i => new UpdateOrderRequestItem(i.Id, i.Name, i.Quantity, i.Unit)));
                var result = await HttpClient.PutAsJsonAsync<UpdateOrderRequest>($"api/Orders", request);
                if (result.IsSuccessStatusCode)
                {
                    EndEditing();
                    OnComplete?.Invoke();
                }
            }
        }
        catch
        {

        }
        finally
        {
            _loading = false;
        }
    }

    private void EndEditing()
    {
        _order = null;
        _providerId = 0;
        Show = false;
        Order = null;
        Providers = Enumerable.Empty<Provider>();
    }
}
