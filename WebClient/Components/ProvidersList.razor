@inject HttpClient HttpClient

@if (_providers is null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <!-- Controls -->
    <button type="button" class="btn btn-success shadow-sm" @onclick="() => ShowProviderEdit(new Provider(), true)">
        New
    </button>

    <!-- Data -->
    <table class="table table-striped mt-3">
        <thead>
            <tr class="fw-bold text-uppercase">
                <td scope="col">Name</td>
                <td scope="col" />
            </tr>
        </thead>
        <tbody>
            @foreach (var provider in _providers)
            {
                <tr>
                    <td scope="row">@provider.Name</td>
                    <td scope="row">
                        <div class="hstack gap-2">
                            <button class="btn btn-warning shadow-sm" @onclick="() => ShowProviderEdit(provider)">
                                Edit
                            </button>
                            <button class="btn btn-danger shadow-sm" @onclick="() => ShowProviderDelete(provider)">
                                Delete
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Paging -->
    @if (_numberOfPages > 1)
    {
        <nav>
            <ul class="pagination justify-content-center">

                <li class="page-item">
                    <button class="page-link"
                    disabled="@(_currentPage == 1)"
                    @onclick="() => SetPage(_currentPage - 1)">
                        Previous
                    </button>
                </li>

                @for (int i = 0; i < _paginationButtons.Length; i++)
                {
                    int pageNumber = _paginationButtons[i];

                    @if (pageNumber <= 0) continue;

                    @if (pageNumber == _currentPage)
                    {
                        <li class="page-item active">
                            <button class="page-link" disabled>
                                @pageNumber
                            </button>
                        </li>
                    }
                    else
                    {
                        <li class="page-item">
                            <button class="page-link" @onclick="() => SetPage(pageNumber)">
                                @pageNumber
                            </button>
                        </li>
                    }
                }

                <li class="page-item">
                    <button class="page-link"
                    disabled="@(_currentPage == _numberOfPages)"
                    @onclick="() => SetPage(_currentPage + 1)">
                        Next
                    </button>
                </li>
            </ul>
        </nav>
    }
}

<ProviderEdit Show="_showProviderEdit"
           NewProvider="_newProviderEdit"
           Provider="_providerToEdit"
           OnCancelProviderEdit="CancelOrderEdit"
           OnProviderEditComplete="async () => await CompleteProviderEdit()" />

<ProviderDelete Show="_showProviderDelete"
             Provider="_providerToDelete"
             OnCancelProviderDelete="CancelProviderDelete"
             OnProviderDeleteComplete="async () => await CompleteProviderDelete()" />

@code {
    private IEnumerable<Provider>? _providers;

    private async Task GetProviders()
    {
        _providers = await HttpClient.GetFromJsonAsync<Provider[]>("api/Providers");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetProviders();
    }

    #region Paging

    private const int _providersPerPage = 7;

    private const int _numberOfPaginationButtons = 3;

    private int _numberOfPages = 1;

    private int _currentPage = 1;

    private int[] _paginationButtons = Array.Empty<int>();

    private async Task SetPage(int page)
    {
        _currentPage = page;
        await GetProviders();
    }

    private int[] GetPagesNumbersForPaginationButtons()
    {
        int[] result = new int[_numberOfPaginationButtons];

        int start;

        if (_currentPage == 1)
        {
            start = 1;
        }
        else if (_currentPage == _numberOfPages)
        {
            start = _numberOfPages - _numberOfPaginationButtons + 1;
        }
        else
        {
            start = _currentPage - 1;
        }

        int j = 0;
        for (int i = start; i <= start + _numberOfPaginationButtons - 1 && i <= _numberOfPages; i++)
        {
            @if (i <= 0) continue;

            result[j] = i;
            j++;
        }

        return result;
    }

    #endregion

    #region Edit

    private bool _showProviderEdit = false;
    private bool _newProviderEdit = false;
    private Provider? _providerToEdit;

    private void ShowProviderEdit(Provider provider, bool newProvider = false)
    {
        _newProviderEdit = newProvider;
        _providerToEdit = provider;
        _showProviderEdit = true;
    }

    private void CancelOrderEdit()
    {
        _newProviderEdit = false;
        _showProviderEdit = false;
        _providerToEdit = null;
    }

    private async Task CompleteProviderEdit()
    {
        _showProviderEdit = false;
        _newProviderEdit = false;
        _providerToEdit = null;

        await GetProviders();

        StateHasChanged();
    }

    #endregion

    #region Delete

    private bool _showProviderDelete = false;
    private Provider? _providerToDelete;

    private void ShowProviderDelete(Provider provider)
    {
        _providerToDelete = provider;
        _showProviderDelete = true;
    }

    private void CancelProviderDelete()
    {
        _showProviderDelete = false;
        _providerToDelete = null;
    }

    private async Task CompleteProviderDelete()
    {
        _showProviderDelete = false;
        _providerToDelete = null;

        await GetProviders();

        StateHasChanged();
    }

    #endregion
}
